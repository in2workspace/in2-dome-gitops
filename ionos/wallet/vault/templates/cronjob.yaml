apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Release.Name }}-check-cronjob
  labels:
    app: {{ .Release.Name }}
spec:
  schedule: "*/5 * * * *"  # Run every 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: vault-check-sa
          containers:
            - name: vault-check
              image: bitnami/kubectl:latest
              command: ["/bin/sh", "-c"]
              args:
                - |
                  #!/bin/sh
                  NAMESPACE="in2"
                  VAULT_SERVICE_NAME="wallet-vault-server"

                  # Set the Vault address using the correct service URL and port 8200
                  export VAULT_ADDR="http://$VAULT_SERVICE_NAME.$NAMESPACE.svc.cluster.local:8200"

                  # Get the Vault pod name using the correct label
                  VAULT_POD_NAME=$(kubectl get pods -n $NAMESPACE -l app.kubernetes.io/name=vault -o jsonpath='{.items[0].metadata.name}')

                  # Check the logs of the pod for the specific message in the last line
                  LAST_LOG_LINE=$(kubectl logs $VAULT_POD_NAME -n $NAMESPACE | tail -n 1)
                  if echo "$LAST_LOG_LINE" | grep -q '[INFO]  core: seal configuration missing, not initialized'; then
                    echo "Vault is not initialized. Proceeding to initialize and unseal Vault..."

                    # Initialize and unseal Vault
                    vault operator init -format=json > /tmp/vault_init.json

                    # Extract the unseal keys and root token
                    unseal_keys=$(cat /tmp/vault_init.json | jq -r '.unseal_keys_b64[]')
                    root_token=$(cat /tmp/vault_init.json | jq -r '.root_token')

                    # Create a Kubernetes Secret with the unseal keys and root token
                    kubectl create secret generic vault-init-keys -n $NAMESPACE \
                      --from-literal=unseal_key_1=$(echo $unseal_keys | cut -d' ' -f1) \
                      --from-literal=unseal_key_2=$(echo $unseal_keys | cut -d' ' -f2) \
                      --from-literal=unseal_key_3=$(echo $unseal_keys | cut -d' ' -f3) \
                      --from-literal=root_token=$root_token \
                      --dry-run=client -o yaml | kubectl apply -f -

                    # Unseal Vault using the unseal keys
                    vault operator unseal $(echo $unseal_keys | cut -d' ' -f1)
                    vault operator unseal $(echo $unseal_keys | cut -d' ' -f2)
                    vault operator unseal $(echo $unseal_keys | cut -d' ' -f3)

                    # Export Vault root token
                    export VAULT_TOKEN=$root_token

                  else
                    echo "Vault is already initialized or the log message was not found."
                  fi
          restartPolicy: OnFailure
