    ## configuration for the desmos - see https://DOME-Marketplace.github.io/access-node for configuration documentation
  access-node:
    desmos:
      # -- should the desmos-blockchain-connector be enabled
      enabled: true
      # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
      fullnameOverride: desmos
      # -- also update the version on contextUrl of tmf
      desmosPathVersion: v2
      image:
        ## image repository
        repository: in2workspace/in2-desmos-api
        # Overrides the image tag whose default is the chart appVersion.
        tag: v2.0.2
        ## image pull policy
        pullPolicy: IfNotPresent
      ## deployment specific configuration
      app:
        ## profile (test == dev)
        profile: dev
        logLevel:
          root: INFO
          app: INFO
        # internal server port
        internalServerPort: 8080
        ## information about the access-node operator
        operator:
          # -- did of the organization running the node
          organizationIdentifier: did:key:zDnaeiyBeX6q6YQTKQt6N9G1itNpF3Cy9hKw4Xup7A5u9R1Dp
          # -- provider of the broker
          provider: scorpio
          # -- internal address of the context broker to be used by the connector
          internalDomain: http://scorpio:9090
          # -- external address of the broker. Will be included in the hashlink and used by other access-nodes to retrieve the actual entities
          externalDomain: http://scorpio:9090
        ## configuration of ngsi-ld entities to listen for
        ## configuration to connect to the dlt-adapter
        dltAdapter:
          # -- provider of the dlt-adapter component
          provider: digitelts
          # -- (local) address of the dlt-adapter
          internalDomain: http://dlt-adapter:8080
          # -- (external) address of the dlt-adapter
          externalDomain: http://dlt-adapter:8080
          ## configuration of subscriptions at the blockchain
          # -- a list of external access node with which to synchronize
        externalDomain:
          protocol: "http"
          domain: "desmos.marketplace-test.svc.cluster.local:8080"
          #domain: "an-dome-dev.theplatforms.it"
        externalAccessNodesUrls:
          enableCustomUrls: true
          customUrls: "https://desmos.dome-marketplace-lcl.org"
        # -- configuration to set your private key
        privateKey:
          # -- your Ethereum private key
          value: 0xe7f0c8c81976f21a63854091c755d38e6221e8f670c3d129f057b7a2578b74d1
          existingSecret:
            # -- should an existing secret be used
            enabled: false
            # -- name of the secret
            #name: desmos-private-key
            # -- key to retrieve the password from
            #key: value
        learCredentialMachineInBase64:
          #existingSecret:
          #enabled: false
          #  name: desmos-lear-credential-machine-secret
          #  key: lear-credential-machine
          value: ""
        trustedAccessNodesList:
          enableCustomTrustedList: false
          customTrustedList: "https://raw.githubusercontent.com/DOME-Marketplace/dome-access-node-directory/main/access-node-directory-"
        verifier:
          enableCustomVerifier: false
          customVerifier: "https://verifier.dome-marketplace-<env>.org"

        ## configuration of the database to be used by the blockchain-connector
      db:
        # -- host of the db
        host: postgresql-connector
        # -- port of the host of the db
        port: 5432
        # -- should be true if is an external service
        externalService: false
        # -- name of the db
        name: mktdb
        # -- username to be used
        username: postgres
        # -- default password to be used
        password: postgres
        existingSecret:
          # -- should an existing secret be used
          enabled: false
          # -- name of the secret
          name: desmos-secret
          # -- key to retrieve the password from
          key: desmos-db-password

    ## configuration for the dlt-adapter - see https://DOME-Marketplace.github.io/access-node/dlt-adapter for configuration documentation
    dlt-adapter:
      # -- should the dlt-adapter be enabled
      enabled: true
      # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
      fullnameOverride: dlt-adapter
      service:
        port: 8080

      existingSecret:
        enabled: false
        name: private-key-secret
        key: private-key

      env:
        DEBUG: "*"
        PRIVATE_KEY: "0xe2afef2c880b138d741995ba56936e389b0b5dd2943e21e4363cc70d81c89346"
        RPC_ADDRESS: "https://red-t.alastria.io/v0/9461d9f4292b41230527d57ee90652a6"
        ISS: "0x5d7b27f85f4b5764f381f534dbcfbee3f3c2e966dee8e48433d9d49411b7ef16"

    ## configuration of postgres to be used for the blockchain-connector - see https://github.com/bitnami/charts/tree/main/bitnami/postgresql for details
    postgresql:
      # -- should the postgresql deployment be enabled
      enabled: true
      # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
      fullnameOverride: postgresql-connector
      # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
      nameOverride: postgresql-connector
      ## auth configuration for the database
      auth:
        # -- username to be used
        username: postgres
        # -- should the default postgres user be enabled
        enablePostgresUser: true
        # -- password to be used
        password: postgres
      ## configuration of the postgres primary replica
      primary:
        ## provide db initialization
        initdb:
          ## provide scripts for initialization
          scripts:
            # -- create the database as expected by the blockchain-connector
            create.sh: |
              psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE mktdb;"
      image:
        registry: docker.io
        repository: bitnamilegacy/postgresql
        tag: 16.0.0-debian-11-r13
        pullPolicy: IfNotPresent

    ## configuration of the context-broker - see https://github.com/FIWARE/helm-charts/tree/main/charts/scorpio-broker-aaio for details
    scorpio:
      # -- should scorpio be enabled
      enabled: true
      ## configuration of the image to be used
      image:
        # -- repository to be used - resource friendly all-in-one-runner without kafka
        repository: scorpiobroker/all-in-one-runner
        # -- tag of the image to be used - latest java image without kafka
        tag: java-4.1.10
      ## configuration of the database to be used by broker
      db:
        # -- host of the db
        dbhost: postgis
        # -- username to be used
        user: postgres
        # -- password to be used
        password: postgres
      ## configuration of the readiness probe
      readinessProbe:
        # -- path to be used for the readiness probe, older versions used /actuator/health
        path: /q/health
      ## configuration of the liveness probe
      livenessProbe:
        # -- path to be used for the readiness probe, older versions used /actuator/health
        path: /q/health
      # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
      fullnameOverride: scorpio
      ## configuration to be used for the service offered by scorpio
      service:
        # -- ClusterIP is the recommended type for most clusters
        type: ClusterIP

    ## configuration for kafka in case its used by scorpio - see https://github.com/bitnami/charts/tree/main/bitnami/kafka
    kafka:
      # -- should kafka be enabled?
      enabled: false

    ## configuration of postgis to be used for scorpio - see https://github.com/bitnami/charts/tree/main/bitnami/postgresql for details
    postgis:
      # -- should postgis be enabled
      enabled: true
      # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
      fullnameOverride: postgis
      # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
      nameOverride: postgis
      ## auth configuration for the database
      auth:
        # -- username to be used
        username: postgres
        # -- should the default postgres user be enabled
        enablePostgresUser: true
        # -- username to be used
        password: postgres
      ## configuration of the postgres primary replicas
      primary:
        ## provide db initialization
        initdb:
          ## provide scripts for initialization
          scripts:
            # -- enable the postgis extension and create the database as expected by scorpio
            enable.sh: |
              psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE EXTENSION postgis;"
              psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE ngb;"
      image:
        registry: docker.io
        repository: bitnamilegacy/postgresql
        tag: 16.0.0-debian-11-r13
        pullPolicy: IfNotPresent

    ## configuration of the tm-forum-api - see https://github.com/FIWARE/helm-charts/tree/main/charts/tm-forum-api for details
    tm-forum-api:
      # -- should tm-forum-api be enabled
      enabled: true
      ## configuration to be used by every api-deployment if nothing specific is provided.
      defaultConfig:
        # --  ngsi-ld broker connection information
        ngsiLd:
          # -- address of the broker
          url: http://scorpio:9090
        # -- default context to be used when contacting the context broker
        contextUrl: https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld
        # -- host that the tm-forum api can be reached at, when the proxy is enabled it should be set to that address. If not, set the host for each api individually
        serverHost: http://localhost:8080
        # additional env vars (If you want the requests to fail in case of unresolvable relationships, you can use the defaults)
        additionalEnvVars:
          - name: MAPPING_STRICT_RELATIONSHIPS
            value: "false"
          - name: API_EXTENSION_ENABLED
            value: "true"
      ## configuration for the api proxy, to serve all apis through one kubernetes service
      apiProxy:
        # -- should the proxy be enabled
        enabled: true